// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooleanCriterionInput struct {
	Value    bool              `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

type DateCriterionInput struct {
	Value    string            `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

type FloatCriterionInput struct {
	Value    float64           `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

type IntCriterionInput struct {
	Value    int32             `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

type ProductLineCriterionInput struct {
	Value    ProductLine       `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

//	 type Todo {
//	  id: ID!
//	  text: String!
//	  done: Boolean!
//	  user: User!
//	}
//
//	type User {
//	  id: ID!
//	  name: String!
//	}
//
//	type Query {
//	  todos: [Todo!]!
//	}
//
//	input NewTodo {
//	  text: String!
//	  userId: String!
//	}
//
//	type Mutation {
//	  createTodo(input: NewTodo!): Todo!
//	}
type Query struct {
}

type Source struct {
	ID            string      `json:"id"`
	Name          string      `json:"name"`
	ReleaseDate   string      `json:"releaseDate"`
	ProductLine   ProductLine `json:"productLine"`
	Link          string      `json:"link"`
	ErrataVersion *float64    `json:"errataVersion,omitempty"`
	ErrataDate    *string     `json:"errataDate,omitempty"`
	IsRemaster    bool        `json:"isRemaster"`
}

type SourceFilter struct {
	And           *SourceFilter              `json:"AND,omitempty"`
	Or            *SourceFilter              `json:"OR,omitempty"`
	Not           *SourceFilter              `json:"NOT,omitempty"`
	ID            *IntCriterionInput         `json:"id,omitempty"`
	Name          *StringCriterionInput      `json:"name,omitempty"`
	ReleaseDate   *DateCriterionInput        `json:"releaseDate,omitempty"`
	ProductLine   *ProductLineCriterionInput `json:"productLine,omitempty"`
	Link          *StringCriterionInput      `json:"link,omitempty"`
	ErrataVersion *FloatCriterionInput       `json:"errataVersion,omitempty"`
	ErrataDate    *DateCriterionInput        `json:"errataDate,omitempty"`
	IsRemaster    *BooleanCriterionInput     `json:"isRemaster,omitempty"`
}

type StringCriterionInput struct {
	Value    string            `json:"value"`
	Modifier CriterionModifier `json:"modifier"`
}

type CriterionModifier string

const (
	// =
	CriterionModifierEquals CriterionModifier = "EQUALS"
	// !=
	CriterionModifierNotEquals CriterionModifier = "NOT_EQUALS"
	// >
	CriterionModifierGreaterThan CriterionModifier = "GREATER_THAN"
	// <
	CriterionModifierLessThan CriterionModifier = "LESS_THAN"
	// IS NULL
	CriterionModifierIsNull CriterionModifier = "IS_NULL"
	// IS NOT NULL
	CriterionModifierIsNotNull CriterionModifier = "IS_NOT_NULL"
	// INCLUDES ALL
	CriterionModifierIncludesAll CriterionModifier = "INCLUDES_ALL"
	CriterionModifierIncludes    CriterionModifier = "INCLUDES"
	CriterionModifierExcludes    CriterionModifier = "EXCLUDES"
	// MATCHES REGEX
	CriterionModifierMatchesRegex CriterionModifier = "MATCHES_REGEX"
	// NOT MATCHES REGEX
	CriterionModifierNotMatchesRegex CriterionModifier = "NOT_MATCHES_REGEX"
	// >= AND <=
	CriterionModifierBetween CriterionModifier = "BETWEEN"
	// < OR >
	CriterionModifierNotBetween CriterionModifier = "NOT_BETWEEN"
)

var AllCriterionModifier = []CriterionModifier{
	CriterionModifierEquals,
	CriterionModifierNotEquals,
	CriterionModifierGreaterThan,
	CriterionModifierLessThan,
	CriterionModifierIsNull,
	CriterionModifierIsNotNull,
	CriterionModifierIncludesAll,
	CriterionModifierIncludes,
	CriterionModifierExcludes,
	CriterionModifierMatchesRegex,
	CriterionModifierNotMatchesRegex,
	CriterionModifierBetween,
	CriterionModifierNotBetween,
}

func (e CriterionModifier) IsValid() bool {
	switch e {
	case CriterionModifierEquals, CriterionModifierNotEquals, CriterionModifierGreaterThan, CriterionModifierLessThan, CriterionModifierIsNull, CriterionModifierIsNotNull, CriterionModifierIncludesAll, CriterionModifierIncludes, CriterionModifierExcludes, CriterionModifierMatchesRegex, CriterionModifierNotMatchesRegex, CriterionModifierBetween, CriterionModifierNotBetween:
		return true
	}
	return false
}

func (e CriterionModifier) String() string {
	return string(e)
}

func (e *CriterionModifier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CriterionModifier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CriterionModifier", str)
	}
	return nil
}

func (e CriterionModifier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductLine string

const (
	ProductLineRulebooks     ProductLine = "RULEBOOKS"
	ProductLineSociety       ProductLine = "SOCIETY"
	ProductLineLostomens     ProductLine = "LOSTOMENS"
	ProductLineBlog          ProductLine = "BLOG"
	ProductLineComic         ProductLine = "COMIC"
	ProductLineAdventure     ProductLine = "ADVENTURE"
	ProductLineAdventurepath ProductLine = "ADVENTUREPATH"
)

var AllProductLine = []ProductLine{
	ProductLineRulebooks,
	ProductLineSociety,
	ProductLineLostomens,
	ProductLineBlog,
	ProductLineComic,
	ProductLineAdventure,
	ProductLineAdventurepath,
}

func (e ProductLine) IsValid() bool {
	switch e {
	case ProductLineRulebooks, ProductLineSociety, ProductLineLostomens, ProductLineBlog, ProductLineComic, ProductLineAdventure, ProductLineAdventurepath:
		return true
	}
	return false
}

func (e ProductLine) String() string {
	return string(e)
}

func (e *ProductLine) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductLine(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductLine", str)
	}
	return nil
}

func (e ProductLine) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
